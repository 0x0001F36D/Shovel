
* DONE rest of basic required primitives
* DONE array and hash primitives
  array, len, hash, keys
* DONE len must work for strings too
* DONE while, for and foreach in the language
  these will be implemented as part of the standard library.
  Implemented as "standard library" code in Shript itself.
* DONE a hasKey primitive.
* DONE cry loudly if a variable or argument
  has the name of a required primitive
* DONE parser errors should show source context, too
* DONE cry loudly if trying to access a hash value
  via '.' uses a non-existing key; return null if the access is made
  via '[]'.
* DONE only catch our errors (improve on the ignore-errors forms in shovel)
* DONE comments :-)
* DONE FN must also record the number of arguments accepted by the callable.
* DONE blocks are expressions :-)
* DONE apostrophes for string quotation
* DONE NEW-FRAME must also have a 'debug' form
  where it takes a list of the names of variable present in the frame,
  not the number of variables.
* DONE when saving the return addresses, also save the position in code
  for the call, so we can build nice stack traces when an exception is
  thrown.
* DONE keep the names of the variables in the environments and 
  display them if in case of an exception.
* DONE check the number of arguments for primitives and required primitives
* DONE add a 'panic' primitive that throws an exception.
* DONE tests !
* DONE record file names in source positions
  (so we can show useful line/column information for multiple files).
* TODO serialization and deserialization
** TODO for the bytecode
** TODO for the VM state
* TODO maybe the representation of instructions should take up less space
** TODO don't record lines and columns everywhere;
   record only character indices within files and calculate
   line/column on demand; store the file names in a special dummy
   instruction; instruction start/end positions in source code should
   be only deltas from previous start/end positions;
* DONE figure out how interruptible user primitives are written
  they return three extra values:
  - :continue, which means keep on going;
  - :nap-and-retry-on-wake-up, go to sleep and retry the primitive call on
    wake-up;
  - :nap, go to sleep and go on from the next instruction after the
    primitive call with the result returned by the primitive call
    (which is pushed on the stack before going to sleep).
* TODO implement interruptible user primitives
* TODO checking of return values for user primitives
  to make sure that they return an instance of a shovel type; tests
  should make sure that required primitives return an instance of a
  shovel type.
* TODO exception raising and handling
