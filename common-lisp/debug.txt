<!-- -*- markdown -*- -->

    (proclaim '(optimize debug))
    (ql:quickload :shovel)

Silly Common Lisp SLOC count :-)

    find . -iname '*.lisp' | xargs egrep "^[\ ]*[^\t ;]" | wc -l
    
Force recompilation:

    find . -iname "package.lisp" | xargs touch
    
Some functions to test serialization:

    (defun pos-to-list (pos)
      (list (shovel-types:pos-line pos)
            (shovel-types:pos-column pos)))

    (defun instruction-to-list (instruction)
      (let (result)
        (push (shovel-types:instruction-opcode instruction) result)
        (alexandria:if-let (args (shovel-types:instruction-arguments instruction))
          (push args result))
        ;; (alexandria:if-let (start-pos (shovel-types:instruction-start-pos instruction))
        ;;   (push (pos-to-list start-pos) result))
        ;; (alexandria:if-let (end-pos (shovel-types:instruction-end-pos instruction))
        ;;   (push (pos-to-list end-pos) result))
        ;; (alexandria:if-let (comments (shovel-types:instruction-comments instruction))
        ;;   (push (cons "c" comments) result))
        (nreverse result)))

    (defun code-to-json (source)
      (let ((*print-circle* t))
        (length (shovel-compiler:assemble-instructions
                 (shovel-compiler:compile-string-to-instructions source)))
        ;; (mpk:encode
        ;;  (mapcar #'instruction-to-list
        ;;          (coerce (shovel-compiler:assemble-instructions
        ;;                   (shovel-compiler:compile-string-to-instructions source))
        ;;                  'list)))
        ))
        
Profiler incantations (for the compiler):
    
    (require 'sb-sprof)

    (sb-sprof:with-profiling (:max-samples 1000
                              :report :flat
                              :loop nil)
             (loop repeat 4000 do
                  (length (shovel-compiler:compile-sources-to-instructions
                            (list (shovel:stdlib))))))

Serializer tests (in pachetul SHOVEL-VM):

    (let* ((ss (make-serializer-state))
           (to-serialize '(1 2))
           (result (serialize to-serialize ss))
           (*print-circle* t)
           (ser-array (coerce (reverse (serializer-state-array ss))
                              'vector))
           (ds (make-deserializer-state
                :array ser-array
                :objects (make-array (length ser-array) :initial-element nil)))
           (deserialized (deserialize result ds)))
      (setf (serializer-state-array ss)
            (reverse (serializer-state-array ss)))
      (print (serializer-state-array ss))
      (print "to-serialize")
      (print to-serialize)
      (print result)
      (print ser-array)
      (print "deserialized")
      (print deserialized)
      (values))      

Or outside of package SHOVEL-VM (also test that re-serialization has
the same effect):

    (let* ((ss (shovel-vm::make-serializer-state))
           (to-serialize '#1=(1 2 #1# #2=#(3 4 #1# #2#)))
           (result (shovel-vm::serialize to-serialize ss))
           (*print-circle* t)
           (ser-array (coerce
                       (reverse (shovel-vm::serializer-state-array ss))
                       'vector))
           (ds (shovel-vm::make-deserializer-state
                :array ser-array
                :objects (make-array (length ser-array) :initial-element nil)))
           (deserialized (shovel-vm::deserialize result ds)))
      (setf (shovel-vm::serializer-state-array ss)
            (reverse (shovel-vm::serializer-state-array ss)))
      (print (shovel-vm::serializer-state-array ss))
      (print "to-serialize")
      (print to-serialize)
      (print result)
      (print ser-array)
      (print "deserialized")
      (print deserialized)
      (setf ss (shovel-vm::make-serializer-state))
      (setf result (shovel-vm::serialize to-serialize ss))
      (setf (shovel-vm::serializer-state-array ss)
            (reverse (shovel-vm::serializer-state-array ss)))
      (print (shovel-vm::serializer-state-array ss))
      (values))

Profiler invocation (for the VM):

    (sb-sprof:with-profiling (:max-samples 10000
                                                    :report :flat
                                                    :loop nil
                                                    :sample-interval 0.001)
               (let ((sources (list (shovel:stdlib)
                                    "
    var result = 0
    stdlib.repeat(150000, fn () {
      var a = array(1, 2, 3, 4, 5)
      result = stdlib.reduceFromLeft(a, 0, fn (acc, item) acc + item)
    })
    result
    ")))
                 (multiple-value-bind (result vm)
                     (shovel-vm:run-vm (shovel:get-bytecode sources)
                                       :sources sources)
                   (declare (ignore result))
                   (print (shovel:vm-used-ticks vm))
                   (print (shovel:vm-used-cells vm)))))

Comparison script (python)

    def reduceLeft(arr, init, fn):
        result = init
        for a in arr:
            result = fn(result, a)
        return result

    result = 15

    import time

    t1 = time.time()

    acc = []

    for x in xrange(150000):
        a = [1, 2, 3, 4, 5]
        result = reduceLeft(a, 0, lambda acc, el: acc + el)
        acc.append(result)

    t2 = time.time()

    print t2 - t1

    print len(acc)

Test code (generation of numbers for MasterMind):

    (setf *src* (list "
    var breakNumber = fn (n) {
      array((n / 1000) % 10,
            (n / 100) % 10,
            (n / 10) % 10,
            n % 10)
    }
    var allDifferent2 = {
      var map = array(0, 0, 0, 0, 0, 0,
                      0, 0, 0, 0, 0, 0)
      fn (bn) {
        var iter = fn (idx) {
          if idx < 4 { 
            if map[bn[idx]] == 0 {
              map[bn[idx]] = 1
              var result = iter(idx + 1)
              map[bn[idx]] = 0
              result
            } else false
          } else true
        }
        iter(0)
        //0
      }
    }
    var allDifferent = fn (bn) {
      var iter = fn (num, idx) {
        if idx == 4 false
        else num == bn[idx] || iter(num, idx + 1)
      }
      !(iter(bn[0], 1) || iter(bn[1], 2) || iter(bn[2], 3))
    }
    var allDifferent3 = fn (bn) {
      bn[0] != bn[1] && bn[0] != bn[2] && bn[0] != bn[3]
      && bn[1] != bn[2] && bn[1] != bn[3]
      && bn[2] != bn[3]
    }
    var generateOptions = fn () {
      var result = array()
      var iter = fn (n) {
        if n < 10000 {
          var bn = breakNumber(n)
          if allDifferent(bn) push(result, bn)
          iter(n + 1)
        }
      }
      iter(0)
      result
    }
    //length(generateOptions())
    slice(generateOptions(), 0, 10)
    "))

Equivalentish Python code:

    def breakNumber(n):
        return [(n / 1000) % 10,
                (n / 100) % 10,
                (n / 10) % 10,
                n % 10]

    def allDifferent(bn):
        def iter(num, idx):
            if idx == 4: return False
            else: return num == bn[idx] or iter(num, idx + 1)
        return not (iter(bn[0], 1) or iter(bn[1], 2) or iter(bn[2], 3))

    def allDifferent2(bn):
        return bn[0] != bn[1] and bn[0] != bn[2] and bn[0] != bn[3] \
            and bn[1] != bn[2] and bn[1] != bn[3] \
            and bn[2] != bn[3]

    def generateOptions():
        result = []
        for n in xrange(10000):
            bn = breakNumber(n)
            if allDifferent(bn): result.append(bn)
        return result

    import time

    t1 = time.time()

    print generateOptions()[:10]

    t2 = time.time()

    print t2 - t1

